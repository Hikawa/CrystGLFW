module CrystGLFW
  # A CharEvent represents a user-input unicode character along with the modifier keys that were held during its input.
  #
  # ```
  # window = CrystGLFW::Window.new
  # window.on_char do |char_event|
  #   puts char_event.char if char_event.shift? # Prints the char if the shift key is held down.
  # end
  # ```
  #
  # CharEvents are generated by `Window#on_char` and are not intended to be
  # created in any other context. As such, CharEvents should be used when
  # generated by the callback, but should never be created.
  struct CharEvent
    @char : Char
    @mod_shift : Bool
    @mod_control : Bool
    @mod_alt : Bool
    @mod_super : Bool

    # :nodoc:
    def initialize(char : Char, modifiers : Int32)
      @char = char
      @mod_shift = modifiers.bit(0) == 1
      @mod_control = modifiers.bit(1) == 1
      @mod_alt = modifiers.bit(2) == 1
      @mod_super = modifiers.bit(3) == 1
    end

    # Returns the underlying unicode character.
    def char
      @char
    end

    # Returns true if the shift key was held down, false otherwise.
    def shift?
      @mod_shift
    end

    # Returns true if the control key was held down, false otherwise.
    def control?
      @mod_control
    end

    # Returns true if the alt key was held down, false otherwise.
    def alt?
      @mod_alt
    end

    # Returns true if the super key was held down, false otherwise.
    def super?
      @mod_super
    end
  end
end
