module CrystGLFW
  # A MouseButtonEvent is generated by the `Window#on_mouse_button` callback and contains a `MouseButton` along with
  # an interface to determine what event occurred with the key.
  struct MouseButtonEvent
    @@actions : Array(Symbol) = [:press, :release]
    @mouse_button : MouseButton
    @action : Symbol | Nil
    @mod_shift : Bool
    @mod_control : Bool
    @mod_alt : Bool
    @mod_super : Bool

    # :nodoc:
    def initialize(mouse_button : MouseButton, action_code : Int32, modifiers : Int32)
      @mouse_button = mouse_button
      @action = @@actions.find { |action| CrystGLFW.constants[action] == action_code }
      @mod_shift = modifiers.bit(0) == 1
      @mod_control = modifiers.bit(1) == 1
      @mod_alt = modifiers.bit(2) == 1
      @mod_super = modifiers.bit(3) == 1
    end

    # Returns the mouse_button.
    #
    # ```
    # window.on_mouse_button do |event|
    #   mouse_button = event.mouse_button
    #   puts "You left-clicked something!" if mouse_button.is? :mouse_button_left
    # end
    # ```
    def mouse_button
      @mouse_button
    end

    # Returns true if the mouse button was pressed. False otherwise.
    #
    # ```
    # window.on_mouse_button do |event|
    #   puts "a mouse button was pressed." if event.press?
    # end
    # ```
    def press?
      @action == :press
    end

    # Returns true if the mouse button was released. False otherwise.
    #
    # ```
    # window.on_mouse_button do |event|
    #   puts "a mouse button was released." if event.release?
    # end
    # ```
    def release?
      @action == :release
    end

    # Returns true if the shift key was held down as a modifier. False otherwise.
    #
    # ```
    # window.on_mouse_button do |event|
    #   puts "the shift key was held down as a modifier." if event.shift?
    # end
    # ```
    def shift?
      @mod_shift
    end

    # Returns true if the control key was held down as a modifier. False otherwise.
    #
    # ```
    # window.on_mouse_button do |event|
    #   puts "the control key was held down as a modifier." if event.control?
    # end
    # ```
    def control?
      @mod_control
    end

    # Returns true if the alt key was held down as a modifier. False otherwise.
    #
    # ```
    # window.on_mouse_button do |event|
    #   puts "the alt key was held down as a modifier." if event.alt?
    # end
    # ```
    def alt?
      @mod_alt
    end

    # Returns true if the super key was held down as a modifier. False otherwise.
    #
    # ```
    # window.on_mouse_button do |event|
    #   puts "the super key was held down as a modifier." if event.super?
    # end
    # ```
    #
    # NOTE: The 'super' key is the Windows key on Windows, the Command key on MacOS, etc.
    def super?
      @mod_super
    end
  end
end
