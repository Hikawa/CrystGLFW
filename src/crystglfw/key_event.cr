module CrystGLFW
  # A KeyEvent is generated by the `Window#on_key` callback and contains a `Key` along with
  # an interface to determine what event occurred with the key.
  struct KeyEvent
    @@actions : Array(Symbol) = [:press, :release, :repeat]
    @key : CrystGLFW::Key
    @action : Symbol | Nil
    @mod_shift : Bool
    @mod_control : Bool
    @mod_alt : Bool
    @mod_super : Bool

    # :nodoc:
    def initialize(key : Key, action_code : Int32, modifiers : Int32)
      @key = key
      @action = @@actions.find { |action| CrystGLFW[action] == action_code }
      @mod_shift = modifiers.bit(0) == 1
      @mod_control = modifiers.bit(1) == 1
      @mod_alt = modifiers.bit(2) == 1
      @mod_super = modifiers.bit(3) == 1
    end

    # Returns the key.
    #
    # ```
    # window.on_key do |key_event|
    #   key = key_event.key
    #   puts "Are you sure you'd like to quit?" if key.is? :key_q
    # end
    # ```
    def key
      @key
    end

    # Returns true if the key was pressed. False otherwise.
    #
    # ```
    # window.on_key do |key_event|
    #   puts "a key was pressed." if key_event.press?
    # end
    # ```
    def press?
      @action == :press
    end

    # Returns true if the key was released. False otherwise.
    #
    # ```
    # window.on_key do |key_event|
    #   puts "a key was released." if key_event.release?
    # end
    # ```
    def release?
      @action == :release
    end

    # Returns true if the key was held down. False otherwise.
    #
    # ```
    # window.on_key do |key_event|
    #   puts "a key was held down." if key_event.repeat?
    # end
    # ```
    def repeat?
      @action == :repeat
    end

    # Returns true if the shift key was held down as a modifier. False otherwise.
    #
    # ```
    # window.on_key do |key_event|
    #   puts "the shift key was held down as a modifier." if key_event.shift?
    # end
    # ```
    def shift?
      @mod_shift
    end

    # Returns true if the control key was held down as a modifier. False otherwise.
    #
    # ```
    # window.on_key do |key_event|
    #   puts "the control key was held down as a modifier." if key_event.control?
    # end
    # ```
    def control?
      @mod_control
    end

    # Returns true if the alt key was held down as a modifier. False otherwise.
    #
    # ```
    # window.on_key do |key_event|
    #   puts "the alt key was held down as a modifier." if key_event.alt?
    # end
    # ```
    def alt?
      @mod_alt
    end

    # Returns true if the super key was held down as a modifier. False otherwise.
    #
    # ```
    # window.on_key do |key_event|
    #   puts "the super key was held down as a modifier." if key_event.super?
    # end
    # ```
    #
    # NOTE: The 'super' key is the Windows key on Windows, the Command key on MacOS, etc.
    def super?
      @mod_super
    end
  end
end
